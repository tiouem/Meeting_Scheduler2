//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Meeting_Scheduler_App
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[49];
            _typeNameTable[0] = "Meeting_Scheduler_App.ViewModel.AddUser_VM";
            _typeNameTable[1] = "Meeting_Scheduler_App.Common.ObservableObject";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Meeting_Scheduler_App.Model.User";
            _typeNameTable[4] = "String";
            _typeNameTable[5] = "System.Collections.Generic.List`1<String>";
            _typeNameTable[6] = "System.Windows.Input.ICommand";
            _typeNameTable[7] = "Meeting_Scheduler_App.View.AddUser";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[9] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[10] = "Meeting_Scheduler_App.Common.ObservableDictionary";
            _typeNameTable[11] = "Meeting_Scheduler_App.Common.NavigationHelper";
            _typeNameTable[12] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[13] = "Meeting_Scheduler_App.ViewModel.CreateRoom_VM";
            _typeNameTable[14] = "Meeting_Scheduler_App.Model.Room";
            _typeNameTable[15] = "Meeting_Scheduler_App.View.CreateRoom";
            _typeNameTable[16] = "Meeting_Scheduler_App.ViewModel.Login_VM";
            _typeNameTable[17] = "Meeting_Scheduler_App.View.Login";
            _typeNameTable[18] = "Meeting_Scheduler_App.ViewModel.MeetingDetail_VM";
            _typeNameTable[19] = "Meeting_Scheduler_App.Model.Meeting";
            _typeNameTable[20] = "Meeting_Scheduler_App.View.MeetingDetail";
            _typeNameTable[21] = "Meeting_Scheduler_App.Convertors.BooleanToCheckIcon";
            _typeNameTable[22] = "Meeting_Scheduler_App.ViewModel.RoomDetail_VM";
            _typeNameTable[23] = "Meeting_Scheduler_App.View.RoomDetail";
            _typeNameTable[24] = "Meeting_Scheduler_App.ViewModel.AddMeeting_VM";
            _typeNameTable[25] = "System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.Room>";
            _typeNameTable[26] = "Int32";
            _typeNameTable[27] = "System.Nullable`1<Int32>";
            _typeNameTable[28] = "System.ValueType";
            _typeNameTable[29] = "System.Nullable`1<Boolean>";
            _typeNameTable[30] = "System.Collections.Generic.ICollection`1<Meeting_Scheduler_App.Model.Meeting>";
            _typeNameTable[31] = "System.Nullable`1<System.DateTime>";
            _typeNameTable[32] = "Boolean";
            _typeNameTable[33] = "TimeSpan";
            _typeNameTable[34] = "System.DateTimeOffset";
            _typeNameTable[35] = "MSchedule.View.AddMeeting";
            _typeNameTable[36] = "Meeting_Scheduler_App.Convertors.IsNotNullToBoolean";
            _typeNameTable[37] = "Meeting_Scheduler_App.Convertors.IsNullToBoolean";
            _typeNameTable[38] = "Meeting_Scheduler_App.ViewModel.Schedule_VM";
            _typeNameTable[39] = "Meeting_Scheduler_App.ViewModel.PageWithLoginOption";
            _typeNameTable[40] = "System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_Tick>";
            _typeNameTable[41] = "Meeting_Scheduler_App.Model.V_Tick";
            _typeNameTable[42] = "System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_Room>";
            _typeNameTable[43] = "Meeting_Scheduler_App.Model.V_Room";
            _typeNameTable[44] = "System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_ScheduleBlock>";
            _typeNameTable[45] = "Meeting_Scheduler_App.Model.V_ScheduleBlock";
            _typeNameTable[46] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[47] = "Double";
            _typeNameTable[48] = "MSchedule.View.Schedule";

            _typeTable = new global::System.Type[49];
            _typeTable[0] = typeof(global::Meeting_Scheduler_App.ViewModel.AddUser_VM);
            _typeTable[1] = typeof(global::Meeting_Scheduler_App.Common.ObservableObject);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::Meeting_Scheduler_App.Model.User);
            _typeTable[4] = typeof(global::System.String);
            _typeTable[5] = typeof(global::System.Collections.Generic.List<global::System.String>);
            _typeTable[6] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[7] = typeof(global::Meeting_Scheduler_App.View.AddUser);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[10] = typeof(global::Meeting_Scheduler_App.Common.ObservableDictionary);
            _typeTable[11] = typeof(global::Meeting_Scheduler_App.Common.NavigationHelper);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[13] = typeof(global::Meeting_Scheduler_App.ViewModel.CreateRoom_VM);
            _typeTable[14] = typeof(global::Meeting_Scheduler_App.Model.Room);
            _typeTable[15] = typeof(global::Meeting_Scheduler_App.View.CreateRoom);
            _typeTable[16] = typeof(global::Meeting_Scheduler_App.ViewModel.Login_VM);
            _typeTable[17] = typeof(global::Meeting_Scheduler_App.View.Login);
            _typeTable[18] = typeof(global::Meeting_Scheduler_App.ViewModel.MeetingDetail_VM);
            _typeTable[19] = typeof(global::Meeting_Scheduler_App.Model.Meeting);
            _typeTable[20] = typeof(global::Meeting_Scheduler_App.View.MeetingDetail);
            _typeTable[21] = typeof(global::Meeting_Scheduler_App.Convertors.BooleanToCheckIcon);
            _typeTable[22] = typeof(global::Meeting_Scheduler_App.ViewModel.RoomDetail_VM);
            _typeTable[23] = typeof(global::Meeting_Scheduler_App.View.RoomDetail);
            _typeTable[24] = typeof(global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM);
            _typeTable[25] = typeof(global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.Room>);
            _typeTable[26] = typeof(global::System.Int32);
            _typeTable[27] = typeof(global::System.Nullable<global::System.Int32>);
            _typeTable[28] = typeof(global::System.ValueType);
            _typeTable[29] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[30] = typeof(global::System.Collections.Generic.ICollection<global::Meeting_Scheduler_App.Model.Meeting>);
            _typeTable[31] = typeof(global::System.Nullable<global::System.DateTime>);
            _typeTable[32] = typeof(global::System.Boolean);
            _typeTable[33] = typeof(global::System.TimeSpan);
            _typeTable[34] = typeof(global::System.DateTimeOffset);
            _typeTable[35] = typeof(global::MSchedule.View.AddMeeting);
            _typeTable[36] = typeof(global::Meeting_Scheduler_App.Convertors.IsNotNullToBoolean);
            _typeTable[37] = typeof(global::Meeting_Scheduler_App.Convertors.IsNullToBoolean);
            _typeTable[38] = typeof(global::Meeting_Scheduler_App.ViewModel.Schedule_VM);
            _typeTable[39] = typeof(global::Meeting_Scheduler_App.ViewModel.PageWithLoginOption);
            _typeTable[40] = typeof(global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_Tick>);
            _typeTable[41] = typeof(global::Meeting_Scheduler_App.Model.V_Tick);
            _typeTable[42] = typeof(global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_Room>);
            _typeTable[43] = typeof(global::Meeting_Scheduler_App.Model.V_Room);
            _typeTable[44] = typeof(global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_ScheduleBlock>);
            _typeTable[45] = typeof(global::Meeting_Scheduler_App.Model.V_ScheduleBlock);
            _typeTable[46] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[47] = typeof(global::System.Double);
            _typeTable[48] = typeof(global::MSchedule.View.Schedule);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AddUser_VM() { return new global::Meeting_Scheduler_App.ViewModel.AddUser_VM(); }
        private object Activate_1_ObservableObject() { return new global::Meeting_Scheduler_App.Common.ObservableObject(); }
        private object Activate_3_User() { return new global::Meeting_Scheduler_App.Model.User(); }
        private object Activate_5_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private object Activate_7_AddUser() { return new global::Meeting_Scheduler_App.View.AddUser(); }
        private object Activate_10_ObservableDictionary() { return new global::Meeting_Scheduler_App.Common.ObservableDictionary(); }
        private object Activate_13_CreateRoom_VM() { return new global::Meeting_Scheduler_App.ViewModel.CreateRoom_VM(); }
        private object Activate_14_Room() { return new global::Meeting_Scheduler_App.Model.Room(); }
        private object Activate_15_CreateRoom() { return new global::Meeting_Scheduler_App.View.CreateRoom(); }
        private object Activate_16_Login_VM() { return new global::Meeting_Scheduler_App.ViewModel.Login_VM(); }
        private object Activate_17_Login() { return new global::Meeting_Scheduler_App.View.Login(); }
        private object Activate_18_MeetingDetail_VM() { return new global::Meeting_Scheduler_App.ViewModel.MeetingDetail_VM(); }
        private object Activate_19_Meeting() { return new global::Meeting_Scheduler_App.Model.Meeting(); }
        private object Activate_20_MeetingDetail() { return new global::Meeting_Scheduler_App.View.MeetingDetail(); }
        private object Activate_21_BooleanToCheckIcon() { return new global::Meeting_Scheduler_App.Convertors.BooleanToCheckIcon(); }
        private object Activate_22_RoomDetail_VM() { return new global::Meeting_Scheduler_App.ViewModel.RoomDetail_VM(); }
        private object Activate_23_RoomDetail() { return new global::Meeting_Scheduler_App.View.RoomDetail(); }
        private object Activate_24_AddMeeting_VM() { return new global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM(); }
        private object Activate_25_List() { return new global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.Room>(); }
        private object Activate_35_AddMeeting() { return new global::MSchedule.View.AddMeeting(); }
        private object Activate_36_IsNotNullToBoolean() { return new global::Meeting_Scheduler_App.Convertors.IsNotNullToBoolean(); }
        private object Activate_37_IsNullToBoolean() { return new global::Meeting_Scheduler_App.Convertors.IsNullToBoolean(); }
        private object Activate_38_Schedule_VM() { return new global::Meeting_Scheduler_App.ViewModel.Schedule_VM(); }
        private object Activate_39_PageWithLoginOption() { return new global::Meeting_Scheduler_App.ViewModel.PageWithLoginOption(); }
        private object Activate_40_List() { return new global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_Tick>(); }
        private object Activate_41_V_Tick() { return new global::Meeting_Scheduler_App.Model.V_Tick(); }
        private object Activate_42_List() { return new global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_Room>(); }
        private object Activate_44_List() { return new global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_ScheduleBlock>(); }
        private object Activate_48_Schedule() { return new global::MSchedule.View.Schedule(); }
        private void VectorAdd_5_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void MapAdd_10_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_25_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Meeting_Scheduler_App.Model.Room>)instance;
            var newItem = (global::Meeting_Scheduler_App.Model.Room)item;
            collection.Add(newItem);
        }
        private void VectorAdd_30_ICollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Meeting_Scheduler_App.Model.Meeting>)instance;
            var newItem = (global::Meeting_Scheduler_App.Model.Meeting)item;
            collection.Add(newItem);
        }
        private void VectorAdd_40_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Meeting_Scheduler_App.Model.V_Tick>)instance;
            var newItem = (global::Meeting_Scheduler_App.Model.V_Tick)item;
            collection.Add(newItem);
        }
        private void VectorAdd_42_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Meeting_Scheduler_App.Model.V_Room>)instance;
            var newItem = (global::Meeting_Scheduler_App.Model.V_Room)item;
            collection.Add(newItem);
        }
        private void VectorAdd_44_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Meeting_Scheduler_App.Model.V_ScheduleBlock>)instance;
            var newItem = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Meeting_Scheduler_App.ViewModel.AddUser_VM
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Meeting_Scheduler_App.Common.ObservableObject"));
                userType.Activator = Activate_0_AddUser_VM;
                userType.AddMemberName("NewUser");
                userType.AddMemberName("PasswordAgain");
                userType.AddMemberName("Positions");
                userType.AddMemberName("AddUserClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Meeting_Scheduler_App.Common.ObservableObject
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_1_ObservableObject;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 2:   //  Object
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Meeting_Scheduler_App.Model.User
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  String
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  System.Collections.Generic.List`1<String>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_5_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  System.Windows.Input.ICommand
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  Meeting_Scheduler_App.View.AddUser
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_7_AddUser;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Meeting_Scheduler_App.Common.ObservableDictionary
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_10_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Meeting_Scheduler_App.Common.NavigationHelper
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Meeting_Scheduler_App.ViewModel.CreateRoom_VM
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Meeting_Scheduler_App.Common.ObservableObject"));
                userType.Activator = Activate_13_CreateRoom_VM;
                userType.AddMemberName("NewRoom");
                userType.AddMemberName("CreateRoomClick");
                userType.AddMemberName("PickFileClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Meeting_Scheduler_App.Model.Room
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_Room;
                userType.AddMemberName("Room_Id");
                userType.AddMemberName("Type");
                userType.AddMemberName("Capacity");
                userType.AddMemberName("Projector");
                userType.AddMemberName("FlipChart");
                userType.AddMemberName("Phone");
                userType.AddMemberName("Camera");
                userType.AddMemberName("Image");
                userType.AddMemberName("Meetings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Meeting_Scheduler_App.View.CreateRoom
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_CreateRoom;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Meeting_Scheduler_App.ViewModel.Login_VM
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_Login_VM;
                userType.AddMemberName("LoginUser");
                userType.AddMemberName("LoginClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Meeting_Scheduler_App.View.Login
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_Login;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Meeting_Scheduler_App.ViewModel.MeetingDetail_VM
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_18_MeetingDetail_VM;
                userType.AddMemberName("Meeting");
                userType.AddMemberName("Date");
                userType.AddMemberName("Edit");
                userType.AddMemberName("GoBackClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Meeting_Scheduler_App.Model.Meeting
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_Meeting;
                userType.AddMemberName("Meeting_Id");
                userType.AddMemberName("Name");
                userType.AddMemberName("Description");
                userType.AddMemberName("Room_Id");
                userType.AddMemberName("Date");
                userType.AddMemberName("Duration");
                userType.AddMemberName("Room");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Meeting_Scheduler_App.View.MeetingDetail
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_MeetingDetail;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Meeting_Scheduler_App.Convertors.BooleanToCheckIcon
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_BooleanToCheckIcon;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Meeting_Scheduler_App.ViewModel.RoomDetail_VM
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_RoomDetail_VM;
                userType.AddMemberName("SelectedRoom");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Meeting_Scheduler_App.View.RoomDetail
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_RoomDetail;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Meeting_Scheduler_App.ViewModel.AddMeeting_VM
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Meeting_Scheduler_App.Common.ObservableObject"));
                userType.Activator = Activate_24_AddMeeting_VM;
                userType.AddMemberName("FilteredRooms");
                userType.AddMemberName("CheckFlipchart");
                userType.AddMemberName("CheckCamera");
                userType.AddMemberName("CheckPhone");
                userType.AddMemberName("CheckProjector");
                userType.AddMemberName("MinCapacity");
                userType.AddMemberName("NewMeeting");
                userType.AddMemberName("StartTime");
                userType.AddMemberName("EndTime");
                userType.AddMemberName("Date");
                userType.AddMemberName("AddMeetingClick");
                userType.AddMemberName("DeleteMeetingClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.Room>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_25_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Int32
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  System.Nullable`1<Int32>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  System.ValueType
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 29:   //  System.Nullable`1<Boolean>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  System.Collections.Generic.ICollection`1<Meeting_Scheduler_App.Model.Meeting>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_30_ICollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  System.Nullable`1<System.DateTime>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Boolean
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  TimeSpan
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  System.DateTimeOffset
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  MSchedule.View.AddMeeting
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_AddMeeting;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Meeting_Scheduler_App.Convertors.IsNotNullToBoolean
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_IsNotNullToBoolean;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Meeting_Scheduler_App.Convertors.IsNullToBoolean
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_37_IsNullToBoolean;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Meeting_Scheduler_App.ViewModel.Schedule_VM
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.PageWithLoginOption"));
                userType.Activator = Activate_38_Schedule_VM;
                userType.AddMemberName("VHeader");
                userType.AddMemberName("VRooms");
                userType.AddMemberName("Date");
                userType.AddMemberName("StringDate");
                userType.AddMemberName("NextDayClick");
                userType.AddMemberName("PrevDayClick");
                userType.AddMemberName("AddRoomClick");
                userType.AddMemberName("AddUserClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Meeting_Scheduler_App.ViewModel.PageWithLoginOption
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Meeting_Scheduler_App.Common.ObservableObject"));
                userType.Activator = Activate_39_PageWithLoginOption;
                userType.AddMemberName("LoggedUser");
                userType.AddMemberName("ShowLoginPageClick");
                userType.AddMemberName("LogoutClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_Tick>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_40_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  Meeting_Scheduler_App.Model.V_Tick
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_41_V_Tick;
                userType.AddMemberName("StrTick");
                userType.AddMemberName("TickWidth");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_Room>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_42_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  Meeting_Scheduler_App.Model.V_Room
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Blocks");
                userType.AddMemberName("Name");
                userType.AddMemberName("RoomClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_ScheduleBlock>
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_44_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  Meeting_Scheduler_App.Model.V_ScheduleBlock
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Color");
                userType.AddMemberName("Booked");
                userType.AddMemberName("BlockWidth");
                userType.AddMemberName("ButtonText");
                userType.AddMemberName("ButtonFontSize");
                userType.AddMemberName("MeetingClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Double
                xamlType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  MSchedule.View.Schedule
                userType = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_Schedule;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_AddUser_VM_NewUser(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddUser_VM)instance;
            return that.NewUser;
        }
        private void set_0_AddUser_VM_NewUser(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddUser_VM)instance;
            that.NewUser = (global::Meeting_Scheduler_App.Model.User)Value;
        }
        private object get_1_AddUser_VM_PasswordAgain(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddUser_VM)instance;
            return that.PasswordAgain;
        }
        private void set_1_AddUser_VM_PasswordAgain(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddUser_VM)instance;
            that.PasswordAgain = (global::System.String)Value;
        }
        private object get_2_AddUser_VM_Positions(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddUser_VM)instance;
            return that.Positions;
        }
        private void set_2_AddUser_VM_Positions(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddUser_VM)instance;
            that.Positions = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_3_AddUser_VM_AddUserClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddUser_VM)instance;
            return that.AddUserClick;
        }
        private object get_4_AddUser_DefaultViewModel(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.AddUser)instance;
            return that.DefaultViewModel;
        }
        private object get_5_AddUser_NavigationHelper(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.AddUser)instance;
            return that.NavigationHelper;
        }
        private object get_6_CreateRoom_VM_NewRoom(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.CreateRoom_VM)instance;
            return that.NewRoom;
        }
        private void set_6_CreateRoom_VM_NewRoom(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.CreateRoom_VM)instance;
            that.NewRoom = (global::Meeting_Scheduler_App.Model.Room)Value;
        }
        private object get_7_CreateRoom_VM_CreateRoomClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.CreateRoom_VM)instance;
            return that.CreateRoomClick;
        }
        private object get_8_CreateRoom_VM_PickFileClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.CreateRoom_VM)instance;
            return that.PickFileClick;
        }
        private object get_9_CreateRoom_DefaultViewModel(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.CreateRoom)instance;
            return that.DefaultViewModel;
        }
        private object get_10_CreateRoom_NavigationHelper(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.CreateRoom)instance;
            return that.NavigationHelper;
        }
        private object get_11_Login_VM_LoginUser(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Login_VM)instance;
            return that.LoginUser;
        }
        private void set_11_Login_VM_LoginUser(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Login_VM)instance;
            that.LoginUser = (global::Meeting_Scheduler_App.Model.User)Value;
        }
        private object get_12_Login_VM_LoginClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Login_VM)instance;
            return that.LoginClick;
        }
        private object get_13_Login_DefaultViewModel(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.Login)instance;
            return that.DefaultViewModel;
        }
        private object get_14_Login_NavigationHelper(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.Login)instance;
            return that.NavigationHelper;
        }
        private object get_15_MeetingDetail_VM_Meeting(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.MeetingDetail_VM)instance;
            return that.Meeting;
        }
        private void set_15_MeetingDetail_VM_Meeting(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.MeetingDetail_VM)instance;
            that.Meeting = (global::Meeting_Scheduler_App.Model.Meeting)Value;
        }
        private object get_16_MeetingDetail_VM_Date(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.MeetingDetail_VM)instance;
            return that.Date;
        }
        private object get_17_MeetingDetail_VM_Edit(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.MeetingDetail_VM)instance;
            return that.Edit;
        }
        private object get_18_MeetingDetail_VM_GoBackClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.MeetingDetail_VM)instance;
            return that.GoBackClick;
        }
        private object get_19_MeetingDetail_DefaultViewModel(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.MeetingDetail)instance;
            return that.DefaultViewModel;
        }
        private object get_20_MeetingDetail_NavigationHelper(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.MeetingDetail)instance;
            return that.NavigationHelper;
        }
        private object get_21_RoomDetail_VM_SelectedRoom(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.RoomDetail_VM)instance;
            return that.SelectedRoom;
        }
        private object get_22_RoomDetail_DefaultViewModel(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.RoomDetail)instance;
            return that.DefaultViewModel;
        }
        private object get_23_RoomDetail_NavigationHelper(object instance)
        {
            var that = (global::Meeting_Scheduler_App.View.RoomDetail)instance;
            return that.NavigationHelper;
        }
        private object get_24_AddMeeting_VM_FilteredRooms(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.FilteredRooms;
        }
        private object get_25_Room_Room_Id(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.Room_Id;
        }
        private void set_25_Room_Room_Id(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.Room_Id = (global::System.Int32)Value;
        }
        private object get_26_Room_Type(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.Type;
        }
        private void set_26_Room_Type(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.Type = (global::System.String)Value;
        }
        private object get_27_Room_Capacity(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.Capacity;
        }
        private void set_27_Room_Capacity(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.Capacity = (global::System.Nullable<global::System.Int32>)Value;
        }
        private object get_28_Room_Projector(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.Projector;
        }
        private void set_28_Room_Projector(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.Projector = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_29_Room_FlipChart(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.FlipChart;
        }
        private void set_29_Room_FlipChart(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.FlipChart = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_30_Room_Phone(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.Phone;
        }
        private void set_30_Room_Phone(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.Phone = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_31_Room_Camera(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.Camera;
        }
        private void set_31_Room_Camera(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.Camera = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_32_Room_Image(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.Image;
        }
        private void set_32_Room_Image(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.Image = (global::System.String)Value;
        }
        private object get_33_Room_Meetings(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            return that.Meetings;
        }
        private void set_33_Room_Meetings(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Room)instance;
            that.Meetings = (global::System.Collections.Generic.ICollection<global::Meeting_Scheduler_App.Model.Meeting>)Value;
        }
        private object get_34_Meeting_Meeting_Id(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            return that.Meeting_Id;
        }
        private void set_34_Meeting_Meeting_Id(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            that.Meeting_Id = (global::System.Int32)Value;
        }
        private object get_35_Meeting_Name(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            return that.Name;
        }
        private void set_35_Meeting_Name(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_36_Meeting_Description(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            return that.Description;
        }
        private void set_36_Meeting_Description(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_37_Meeting_Room_Id(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            return that.Room_Id;
        }
        private void set_37_Meeting_Room_Id(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            that.Room_Id = (global::System.Int32)Value;
        }
        private object get_38_Meeting_Date(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            return that.Date;
        }
        private void set_38_Meeting_Date(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            that.Date = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_39_Meeting_Duration(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            return that.Duration;
        }
        private void set_39_Meeting_Duration(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            that.Duration = (global::System.Nullable<global::System.Int32>)Value;
        }
        private object get_40_Meeting_Room(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            return that.Room;
        }
        private void set_40_Meeting_Room(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.Meeting)instance;
            that.Room = (global::Meeting_Scheduler_App.Model.Room)Value;
        }
        private object get_41_AddMeeting_VM_CheckFlipchart(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.CheckFlipchart;
        }
        private void set_41_AddMeeting_VM_CheckFlipchart(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.CheckFlipchart = (global::System.Boolean)Value;
        }
        private object get_42_AddMeeting_VM_CheckCamera(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.CheckCamera;
        }
        private void set_42_AddMeeting_VM_CheckCamera(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.CheckCamera = (global::System.Boolean)Value;
        }
        private object get_43_AddMeeting_VM_CheckPhone(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.CheckPhone;
        }
        private void set_43_AddMeeting_VM_CheckPhone(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.CheckPhone = (global::System.Boolean)Value;
        }
        private object get_44_AddMeeting_VM_CheckProjector(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.CheckProjector;
        }
        private void set_44_AddMeeting_VM_CheckProjector(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.CheckProjector = (global::System.Boolean)Value;
        }
        private object get_45_AddMeeting_VM_MinCapacity(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.MinCapacity;
        }
        private void set_45_AddMeeting_VM_MinCapacity(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.MinCapacity = (global::System.String)Value;
        }
        private object get_46_AddMeeting_VM_NewMeeting(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.NewMeeting;
        }
        private void set_46_AddMeeting_VM_NewMeeting(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.NewMeeting = (global::Meeting_Scheduler_App.Model.Meeting)Value;
        }
        private object get_47_AddMeeting_VM_StartTime(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.StartTime;
        }
        private void set_47_AddMeeting_VM_StartTime(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.StartTime = (global::System.TimeSpan)Value;
        }
        private object get_48_AddMeeting_VM_EndTime(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.EndTime;
        }
        private void set_48_AddMeeting_VM_EndTime(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.EndTime = (global::System.TimeSpan)Value;
        }
        private object get_49_AddMeeting_VM_Date(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.Date;
        }
        private void set_49_AddMeeting_VM_Date(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            that.Date = (global::System.DateTimeOffset)Value;
        }
        private object get_50_AddMeeting_VM_AddMeetingClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.AddMeetingClick;
        }
        private object get_51_AddMeeting_VM_DeleteMeetingClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.AddMeeting_VM)instance;
            return that.DeleteMeetingClick;
        }
        private object get_52_AddMeeting_DefaultViewModel(object instance)
        {
            var that = (global::MSchedule.View.AddMeeting)instance;
            return that.DefaultViewModel;
        }
        private object get_53_AddMeeting_NavigationHelper(object instance)
        {
            var that = (global::MSchedule.View.AddMeeting)instance;
            return that.NavigationHelper;
        }
        private object get_54_Schedule_VM_VHeader(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            return that.VHeader;
        }
        private void set_54_Schedule_VM_VHeader(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            that.VHeader = (global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_Tick>)Value;
        }
        private object get_55_V_Tick_StrTick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Tick)instance;
            return that.StrTick;
        }
        private void set_55_V_Tick_StrTick(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Tick)instance;
            that.StrTick = (global::System.String)Value;
        }
        private object get_56_V_Tick_TickWidth(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Tick)instance;
            return that.TickWidth;
        }
        private void set_56_V_Tick_TickWidth(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Tick)instance;
            that.TickWidth = (global::System.Int32)Value;
        }
        private object get_57_Schedule_VM_VRooms(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            return that.VRooms;
        }
        private void set_57_Schedule_VM_VRooms(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            that.VRooms = (global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_Room>)Value;
        }
        private object get_58_V_Room_Blocks(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Room)instance;
            return that.Blocks;
        }
        private void set_58_V_Room_Blocks(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Room)instance;
            that.Blocks = (global::System.Collections.Generic.List<global::Meeting_Scheduler_App.Model.V_ScheduleBlock>)Value;
        }
        private object get_59_V_ScheduleBlock_Color(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            return that.Color;
        }
        private void set_59_V_ScheduleBlock_Color(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            that.Color = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_60_V_ScheduleBlock_Booked(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            return that.Booked;
        }
        private void set_60_V_ScheduleBlock_Booked(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            that.Booked = (global::System.Boolean)Value;
        }
        private object get_61_V_ScheduleBlock_BlockWidth(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            return that.BlockWidth;
        }
        private void set_61_V_ScheduleBlock_BlockWidth(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            that.BlockWidth = (global::System.Int32)Value;
        }
        private object get_62_V_ScheduleBlock_ButtonText(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            return that.ButtonText;
        }
        private object get_63_V_ScheduleBlock_ButtonFontSize(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            return that.ButtonFontSize;
        }
        private object get_64_V_ScheduleBlock_MeetingClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_ScheduleBlock)instance;
            return that.MeetingClick;
        }
        private object get_65_V_Room_Name(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Room)instance;
            return that.Name;
        }
        private void set_65_V_Room_Name(object instance, object Value)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Room)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_66_V_Room_RoomClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.Model.V_Room)instance;
            return that.RoomClick;
        }
        private object get_67_Schedule_VM_Date(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            return that.Date;
        }
        private object get_68_Schedule_VM_StringDate(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            return that.StringDate;
        }
        private object get_69_Schedule_VM_NextDayClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            return that.NextDayClick;
        }
        private object get_70_Schedule_VM_PrevDayClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            return that.PrevDayClick;
        }
        private object get_71_Schedule_VM_AddRoomClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            return that.AddRoomClick;
        }
        private object get_72_Schedule_VM_AddUserClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.Schedule_VM)instance;
            return that.AddUserClick;
        }
        private object get_73_PageWithLoginOption_LoggedUser(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.PageWithLoginOption)instance;
            return that.LoggedUser;
        }
        private object get_74_PageWithLoginOption_ShowLoginPageClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.PageWithLoginOption)instance;
            return that.ShowLoginPageClick;
        }
        private object get_75_PageWithLoginOption_LogoutClick(object instance)
        {
            var that = (global::Meeting_Scheduler_App.ViewModel.PageWithLoginOption)instance;
            return that.LogoutClick;
        }
        private object get_76_Schedule_DefaultViewModel(object instance)
        {
            var that = (global::MSchedule.View.Schedule)instance;
            return that.DefaultViewModel;
        }
        private object get_77_Schedule_NavigationHelper(object instance)
        {
            var that = (global::MSchedule.View.Schedule)instance;
            return that.NavigationHelper;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember xamlMember = null;
            global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Meeting_Scheduler_App.ViewModel.AddUser_VM.NewUser":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddUser_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NewUser", "Meeting_Scheduler_App.Model.User");
                xamlMember.Getter = get_0_AddUser_VM_NewUser;
                xamlMember.Setter = set_0_AddUser_VM_NewUser;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddUser_VM.PasswordAgain":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddUser_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "PasswordAgain", "String");
                xamlMember.Getter = get_1_AddUser_VM_PasswordAgain;
                xamlMember.Setter = set_1_AddUser_VM_PasswordAgain;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddUser_VM.Positions":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddUser_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Positions", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_2_AddUser_VM_Positions;
                xamlMember.Setter = set_2_AddUser_VM_Positions;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddUser_VM.AddUserClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddUser_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "AddUserClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_3_AddUser_VM_AddUserClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.AddUser.DefaultViewModel":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.AddUser");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Meeting_Scheduler_App.Common.ObservableDictionary");
                xamlMember.Getter = get_4_AddUser_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.AddUser.NavigationHelper":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.AddUser");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Meeting_Scheduler_App.Common.NavigationHelper");
                xamlMember.Getter = get_5_AddUser_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.CreateRoom_VM.NewRoom":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.CreateRoom_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NewRoom", "Meeting_Scheduler_App.Model.Room");
                xamlMember.Getter = get_6_CreateRoom_VM_NewRoom;
                xamlMember.Setter = set_6_CreateRoom_VM_NewRoom;
                break;
            case "Meeting_Scheduler_App.ViewModel.CreateRoom_VM.CreateRoomClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.CreateRoom_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "CreateRoomClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_7_CreateRoom_VM_CreateRoomClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.CreateRoom_VM.PickFileClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.CreateRoom_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "PickFileClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_8_CreateRoom_VM_PickFileClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.CreateRoom.DefaultViewModel":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.CreateRoom");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Meeting_Scheduler_App.Common.ObservableDictionary");
                xamlMember.Getter = get_9_CreateRoom_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.CreateRoom.NavigationHelper":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.CreateRoom");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Meeting_Scheduler_App.Common.NavigationHelper");
                xamlMember.Getter = get_10_CreateRoom_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.Login_VM.LoginUser":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Login_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "LoginUser", "Meeting_Scheduler_App.Model.User");
                xamlMember.Getter = get_11_Login_VM_LoginUser;
                xamlMember.Setter = set_11_Login_VM_LoginUser;
                break;
            case "Meeting_Scheduler_App.ViewModel.Login_VM.LoginClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Login_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "LoginClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_12_Login_VM_LoginClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.Login.DefaultViewModel":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.Login");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Meeting_Scheduler_App.Common.ObservableDictionary");
                xamlMember.Getter = get_13_Login_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.Login.NavigationHelper":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.Login");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Meeting_Scheduler_App.Common.NavigationHelper");
                xamlMember.Getter = get_14_Login_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.MeetingDetail_VM.Meeting":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.MeetingDetail_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Meeting", "Meeting_Scheduler_App.Model.Meeting");
                xamlMember.Getter = get_15_MeetingDetail_VM_Meeting;
                xamlMember.Setter = set_15_MeetingDetail_VM_Meeting;
                break;
            case "Meeting_Scheduler_App.ViewModel.MeetingDetail_VM.Date":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.MeetingDetail_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Date", "String");
                xamlMember.Getter = get_16_MeetingDetail_VM_Date;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.MeetingDetail_VM.Edit":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.MeetingDetail_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Edit", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_17_MeetingDetail_VM_Edit;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.MeetingDetail_VM.GoBackClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.MeetingDetail_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "GoBackClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_18_MeetingDetail_VM_GoBackClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.MeetingDetail.DefaultViewModel":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.MeetingDetail");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Meeting_Scheduler_App.Common.ObservableDictionary");
                xamlMember.Getter = get_19_MeetingDetail_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.MeetingDetail.NavigationHelper":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.MeetingDetail");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Meeting_Scheduler_App.Common.NavigationHelper");
                xamlMember.Getter = get_20_MeetingDetail_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.RoomDetail_VM.SelectedRoom":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.RoomDetail_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "SelectedRoom", "Meeting_Scheduler_App.Model.Room");
                xamlMember.Getter = get_21_RoomDetail_VM_SelectedRoom;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.RoomDetail.DefaultViewModel":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.RoomDetail");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Meeting_Scheduler_App.Common.ObservableDictionary");
                xamlMember.Getter = get_22_RoomDetail_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.View.RoomDetail.NavigationHelper":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.View.RoomDetail");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Meeting_Scheduler_App.Common.NavigationHelper");
                xamlMember.Getter = get_23_RoomDetail_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.FilteredRooms":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "FilteredRooms", "System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.Room>");
                xamlMember.Getter = get_24_AddMeeting_VM_FilteredRooms;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.Model.Room.Room_Id":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Room_Id", "Int32");
                xamlMember.Getter = get_25_Room_Room_Id;
                xamlMember.Setter = set_25_Room_Room_Id;
                break;
            case "Meeting_Scheduler_App.Model.Room.Type":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Type", "String");
                xamlMember.Getter = get_26_Room_Type;
                xamlMember.Setter = set_26_Room_Type;
                break;
            case "Meeting_Scheduler_App.Model.Room.Capacity":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Capacity", "System.Nullable`1<Int32>");
                xamlMember.Getter = get_27_Room_Capacity;
                xamlMember.Setter = set_27_Room_Capacity;
                break;
            case "Meeting_Scheduler_App.Model.Room.Projector":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Projector", "System.Nullable`1<Boolean>");
                xamlMember.Getter = get_28_Room_Projector;
                xamlMember.Setter = set_28_Room_Projector;
                break;
            case "Meeting_Scheduler_App.Model.Room.FlipChart":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "FlipChart", "System.Nullable`1<Boolean>");
                xamlMember.Getter = get_29_Room_FlipChart;
                xamlMember.Setter = set_29_Room_FlipChart;
                break;
            case "Meeting_Scheduler_App.Model.Room.Phone":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Phone", "System.Nullable`1<Boolean>");
                xamlMember.Getter = get_30_Room_Phone;
                xamlMember.Setter = set_30_Room_Phone;
                break;
            case "Meeting_Scheduler_App.Model.Room.Camera":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Camera", "System.Nullable`1<Boolean>");
                xamlMember.Getter = get_31_Room_Camera;
                xamlMember.Setter = set_31_Room_Camera;
                break;
            case "Meeting_Scheduler_App.Model.Room.Image":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Image", "String");
                xamlMember.Getter = get_32_Room_Image;
                xamlMember.Setter = set_32_Room_Image;
                break;
            case "Meeting_Scheduler_App.Model.Room.Meetings":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Meetings", "System.Collections.Generic.ICollection`1<Meeting_Scheduler_App.Model.Meeting>");
                xamlMember.Getter = get_33_Room_Meetings;
                xamlMember.Setter = set_33_Room_Meetings;
                break;
            case "Meeting_Scheduler_App.Model.Meeting.Meeting_Id":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Meeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Meeting_Id", "Int32");
                xamlMember.Getter = get_34_Meeting_Meeting_Id;
                xamlMember.Setter = set_34_Meeting_Meeting_Id;
                break;
            case "Meeting_Scheduler_App.Model.Meeting.Name":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Meeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_35_Meeting_Name;
                xamlMember.Setter = set_35_Meeting_Name;
                break;
            case "Meeting_Scheduler_App.Model.Meeting.Description":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Meeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_36_Meeting_Description;
                xamlMember.Setter = set_36_Meeting_Description;
                break;
            case "Meeting_Scheduler_App.Model.Meeting.Room_Id":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Meeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Room_Id", "Int32");
                xamlMember.Getter = get_37_Meeting_Room_Id;
                xamlMember.Setter = set_37_Meeting_Room_Id;
                break;
            case "Meeting_Scheduler_App.Model.Meeting.Date":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Meeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Date", "System.Nullable`1<System.DateTime>");
                xamlMember.Getter = get_38_Meeting_Date;
                xamlMember.Setter = set_38_Meeting_Date;
                break;
            case "Meeting_Scheduler_App.Model.Meeting.Duration":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Meeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Duration", "System.Nullable`1<Int32>");
                xamlMember.Getter = get_39_Meeting_Duration;
                xamlMember.Setter = set_39_Meeting_Duration;
                break;
            case "Meeting_Scheduler_App.Model.Meeting.Room":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.Meeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Room", "Meeting_Scheduler_App.Model.Room");
                xamlMember.Getter = get_40_Meeting_Room;
                xamlMember.Setter = set_40_Meeting_Room;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.CheckFlipchart":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "CheckFlipchart", "Boolean");
                xamlMember.Getter = get_41_AddMeeting_VM_CheckFlipchart;
                xamlMember.Setter = set_41_AddMeeting_VM_CheckFlipchart;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.CheckCamera":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "CheckCamera", "Boolean");
                xamlMember.Getter = get_42_AddMeeting_VM_CheckCamera;
                xamlMember.Setter = set_42_AddMeeting_VM_CheckCamera;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.CheckPhone":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "CheckPhone", "Boolean");
                xamlMember.Getter = get_43_AddMeeting_VM_CheckPhone;
                xamlMember.Setter = set_43_AddMeeting_VM_CheckPhone;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.CheckProjector":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "CheckProjector", "Boolean");
                xamlMember.Getter = get_44_AddMeeting_VM_CheckProjector;
                xamlMember.Setter = set_44_AddMeeting_VM_CheckProjector;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.MinCapacity":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "MinCapacity", "String");
                xamlMember.Getter = get_45_AddMeeting_VM_MinCapacity;
                xamlMember.Setter = set_45_AddMeeting_VM_MinCapacity;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.NewMeeting":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NewMeeting", "Meeting_Scheduler_App.Model.Meeting");
                xamlMember.Getter = get_46_AddMeeting_VM_NewMeeting;
                xamlMember.Setter = set_46_AddMeeting_VM_NewMeeting;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.StartTime":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "StartTime", "TimeSpan");
                xamlMember.Getter = get_47_AddMeeting_VM_StartTime;
                xamlMember.Setter = set_47_AddMeeting_VM_StartTime;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.EndTime":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "EndTime", "TimeSpan");
                xamlMember.Getter = get_48_AddMeeting_VM_EndTime;
                xamlMember.Setter = set_48_AddMeeting_VM_EndTime;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.Date":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Date", "System.DateTimeOffset");
                xamlMember.Getter = get_49_AddMeeting_VM_Date;
                xamlMember.Setter = set_49_AddMeeting_VM_Date;
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.AddMeetingClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "AddMeetingClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_50_AddMeeting_VM_AddMeetingClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.AddMeeting_VM.DeleteMeetingClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.AddMeeting_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "DeleteMeetingClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_51_AddMeeting_VM_DeleteMeetingClick;
                xamlMember.SetIsReadOnly();
                break;
            case "MSchedule.View.AddMeeting.DefaultViewModel":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MSchedule.View.AddMeeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Meeting_Scheduler_App.Common.ObservableDictionary");
                xamlMember.Getter = get_52_AddMeeting_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "MSchedule.View.AddMeeting.NavigationHelper":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MSchedule.View.AddMeeting");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Meeting_Scheduler_App.Common.NavigationHelper");
                xamlMember.Getter = get_53_AddMeeting_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.Schedule_VM.VHeader":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Schedule_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "VHeader", "System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_Tick>");
                xamlMember.Getter = get_54_Schedule_VM_VHeader;
                xamlMember.Setter = set_54_Schedule_VM_VHeader;
                break;
            case "Meeting_Scheduler_App.Model.V_Tick.StrTick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_Tick");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "StrTick", "String");
                xamlMember.Getter = get_55_V_Tick_StrTick;
                xamlMember.Setter = set_55_V_Tick_StrTick;
                break;
            case "Meeting_Scheduler_App.Model.V_Tick.TickWidth":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_Tick");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "TickWidth", "Int32");
                xamlMember.Getter = get_56_V_Tick_TickWidth;
                xamlMember.Setter = set_56_V_Tick_TickWidth;
                break;
            case "Meeting_Scheduler_App.ViewModel.Schedule_VM.VRooms":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Schedule_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "VRooms", "System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_Room>");
                xamlMember.Getter = get_57_Schedule_VM_VRooms;
                xamlMember.Setter = set_57_Schedule_VM_VRooms;
                break;
            case "Meeting_Scheduler_App.Model.V_Room.Blocks":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Blocks", "System.Collections.Generic.List`1<Meeting_Scheduler_App.Model.V_ScheduleBlock>");
                xamlMember.Getter = get_58_V_Room_Blocks;
                xamlMember.Setter = set_58_V_Room_Blocks;
                break;
            case "Meeting_Scheduler_App.Model.V_ScheduleBlock.Color":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_ScheduleBlock");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_59_V_ScheduleBlock_Color;
                xamlMember.Setter = set_59_V_ScheduleBlock_Color;
                break;
            case "Meeting_Scheduler_App.Model.V_ScheduleBlock.Booked":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_ScheduleBlock");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Booked", "Boolean");
                xamlMember.Getter = get_60_V_ScheduleBlock_Booked;
                xamlMember.Setter = set_60_V_ScheduleBlock_Booked;
                break;
            case "Meeting_Scheduler_App.Model.V_ScheduleBlock.BlockWidth":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_ScheduleBlock");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "BlockWidth", "Int32");
                xamlMember.Getter = get_61_V_ScheduleBlock_BlockWidth;
                xamlMember.Setter = set_61_V_ScheduleBlock_BlockWidth;
                break;
            case "Meeting_Scheduler_App.Model.V_ScheduleBlock.ButtonText":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_ScheduleBlock");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "ButtonText", "String");
                xamlMember.Getter = get_62_V_ScheduleBlock_ButtonText;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.Model.V_ScheduleBlock.ButtonFontSize":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_ScheduleBlock");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "ButtonFontSize", "Double");
                xamlMember.Getter = get_63_V_ScheduleBlock_ButtonFontSize;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.Model.V_ScheduleBlock.MeetingClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_ScheduleBlock");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "MeetingClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_64_V_ScheduleBlock_MeetingClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.Model.V_Room.Name":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_65_V_Room_Name;
                xamlMember.Setter = set_65_V_Room_Name;
                break;
            case "Meeting_Scheduler_App.Model.V_Room.RoomClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.Model.V_Room");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "RoomClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_66_V_Room_RoomClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.Schedule_VM.Date":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Schedule_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "Date", "System.DateTimeOffset");
                xamlMember.Getter = get_67_Schedule_VM_Date;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.Schedule_VM.StringDate":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Schedule_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "StringDate", "String");
                xamlMember.Getter = get_68_Schedule_VM_StringDate;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.Schedule_VM.NextDayClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Schedule_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NextDayClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_69_Schedule_VM_NextDayClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.Schedule_VM.PrevDayClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Schedule_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "PrevDayClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_70_Schedule_VM_PrevDayClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.Schedule_VM.AddRoomClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Schedule_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "AddRoomClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_71_Schedule_VM_AddRoomClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.Schedule_VM.AddUserClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.Schedule_VM");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "AddUserClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_72_Schedule_VM_AddUserClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.PageWithLoginOption.LoggedUser":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.PageWithLoginOption");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "LoggedUser", "Meeting_Scheduler_App.Model.User");
                xamlMember.Getter = get_73_PageWithLoginOption_LoggedUser;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.PageWithLoginOption.ShowLoginPageClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.PageWithLoginOption");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "ShowLoginPageClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_74_PageWithLoginOption_ShowLoginPageClick;
                xamlMember.SetIsReadOnly();
                break;
            case "Meeting_Scheduler_App.ViewModel.PageWithLoginOption.LogoutClick":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Meeting_Scheduler_App.ViewModel.PageWithLoginOption");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "LogoutClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_75_PageWithLoginOption_LogoutClick;
                xamlMember.SetIsReadOnly();
                break;
            case "MSchedule.View.Schedule.DefaultViewModel":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MSchedule.View.Schedule");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Meeting_Scheduler_App.Common.ObservableDictionary");
                xamlMember.Getter = get_76_Schedule_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "MSchedule.View.Schedule.NavigationHelper":
                userType = (global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MSchedule.View.Schedule");
                xamlMember = new global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Meeting_Scheduler_App.Common.NavigationHelper");
                xamlMember.Getter = get_77_Schedule_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlSystemBaseType
    {
        global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Meeting_Scheduler_App.Meeting_Scheduler_App_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


